$flag-width: 2em;
$flag-height: 3em;
$ribbon-spacing: 10px;
$first-ribbon-spacing: 2*$ribbon-spacing;
$max-flags: 10;

.flag-container {
  @include d-flex;
  @include absolute(0, $first-ribbon-spacing, auto, auto);
  @include flex-direction(row-reverse);
  //overflow: hidden;
  // TODO(DJRHails): This should include overflow, but it breaks the tooltips
  height: $flag-height + $flag-width / 2;
  z-index: 2;
}

$tooltip-arrow-size: 8px;
$tooltip-time: 0.2s;
.flag-tooltip {
  padding: 10px;
  background-color: #fff;
  border-radius: 3px;
  box-shadow: 0 2px 8px rgba(25, 25, 25, 0.3);
  color: #191919;
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: center;
  justify-content: center;
  position: absolute;
  z-index: 100;

  &.fadein {
    animation: fade-in-100 $tooltip-time linear;
  }

  &.fadeout {
    animation: fade-out $tooltip-time linear;
    visibility: hidden;
  }

  &__header {
    font-family: inherit;
    font-size: 11px;
    font-weight: bold;
    color: dimgray;
    line-height: 2;
    padding: 5px 0;
    text-transform: uppercase;
    white-space: nowrap;
  }

  &__info {
    color: dimgray;
    white-space: nowrap;
    width: 100%;
  }

  &__arrow, &__arrow:before {
    position: absolute;
    width: $tooltip-arrow-size;
    height: $tooltip-arrow-size;
    z-index: -1;
  }

  &__arrow:before {
    content: '';
    transform: rotate(45deg);
    background: #fff;
  }
}

.flag-tooltip[data-popper-placement^='top'] > .flag-tooltip__arrow {
  bottom: -$tooltip-arrow-size/2;
}

.flag-tooltip[data-popper-placement^='bottom'] > .flag-tooltip__arrow {
  top: -$tooltip-arrow-size/2;
}

.flag-tooltip[data-popper-placement^='left'] > .flag-tooltip__arrow {
  right: -$tooltip-arrow-size/2;
}

.flag-tooltip[data-popper-placement^='right'] > .flag-tooltip__arrow {
  left: -$tooltip-arrow-size/2;
}

.ribbon{
  position: relative;
  width: $flag-width;
  margin-left: $ribbon-spacing;
  height: $flag-height;
  margin-bottom: $flag-width/2;

  &.hovered {
    $hover-offset: $flag-height * 0.1;

    height: $flag-height + $hover-offset;

    svg {
      margin-top: $flag-width/2 + $hover-offset;
    }
  }

  // Ribbon tail
  &:after{
    border-style: solid;
    height: 0;
    width: 0;
    display: block;
    content:"";
    position: absolute;
    left: 0;

    bottom: -$flag-width/2 * 0.975; // Scale factor to make it handle rounding errors
    border-width: 0 $flag-width/2 $flag-width/2 $flag-width/2;
  }

  svg {
      display: block;
      margin-top: $flag-width/2;
      width: 60%;
      margin-left: auto;
      margin-right: auto;
  }
}
// Colour options
@each $color, $value in $theme-colors {
  .ribbon--#{$color} {
    background: $value;
    color: darken($value, 10%);
    &:after{
      border-color: transparent $value;
    }
  }
}


// Handle flip on even cards
.project-card:nth-of-type(even) {
  .flag-container {
    @include absolute(0, auto, auto, $first-ribbon-spacing);
    @include flex-direction(row);
  }

  .ribbon {
    margin-left: auto;
    margin-right: $ribbon-spacing;
  }
}

// Handle hover
.ribbon {
  opacity: 0;
  transform: translateY(-10%);
  @include transition(unquote("transform 0.2s linear, opacity 0.2s linear"));
}
@for $i from 0 through $max-flags {
  .flag-container .ribbon:nth-child(#{$i + 1}) {
    transition-delay: 0.1s * $i;
  }
}

.project-card__wrapper:hover .ribbon {
  opacity: 1;
  transform: translateY(0);
}
